// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.17;

import {Ownable} from "openzeppelin-contracts/contracts/access/Ownable.sol";
import {MutableUnlockersController} from "../controllers/MutableUnlockersController.sol";
import {ChainlinkSourceAdapter} from "../adapters/source-adapters/ChainlinkSourceAdapter.sol";
import {ChainlinkDestinationAdapter} from "../adapters/destination-adapters/ChainlinkDestinationAdapter.sol";
import {IAggregatorV3Source} from "../interfaces/chainlink/IAggregatorV3Source.sol";
import {BaseFactory} from "./BaseFactory.sol";

/**
 * @title StandardOvalChainlink is the recommended Oval Chainlink contract that allows Oval to extract OEV generated by
 * Chainlink usage.
 */
contract StandardOvalChainlink is MutableUnlockersController, ChainlinkSourceAdapter, ChainlinkDestinationAdapter {
    constructor(IAggregatorV3Source source, address[] memory unlockers, uint256 _lockWindow, uint256 _maxTraversal, address owner)
        ChainlinkSourceAdapter(source)
        MutableUnlockersController(_lockWindow, _maxTraversal, unlockers)
        ChainlinkDestinationAdapter(source.decimals())
    {
        _transferOwnership(owner);   
    }
}

/**
 * @title StandardChainlinkFactory is the reccomended factory for use cases that want a Chainlink source and Chainlink
 * interface.
 * @dev This is the best factory for most use cases, but there are other variants that may be needed if different
 * mutability choices are desired.
 */
contract StandardChainlinkFactory is Ownable, BaseFactory {
    constructor(uint256 maxTraversal, address[] memory _defaultUnlockers) BaseFactory(maxTraversal, _defaultUnlockers) {}

    /**
     * @notice Creates the Chainlink Oval instance.
     * @param source the Chainlink oracle source contract.
     * @param lockWindow the lockWindow used for this Oval instance. This is the length of the window
     * for the Oval auction to be run and, thus, the maximum time that prices will be delayed.
     */
    function create(IAggregatorV3Source source, uint256 lockWindow) external returns (address) {
        return address(new StandardOvalChainlink(source, defaultUnlockers, lockWindow, MAX_TRAVERSAL, owner()));
    }
}
