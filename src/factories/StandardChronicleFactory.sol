// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.17;

import {Ownable} from "openzeppelin-contracts/contracts/access/Ownable.sol";
import {MutableUnlockersController} from "../controllers/MutableUnlockersController.sol";
import {ChronicleMedianSourceAdapter} from "../adapters/source-adapters/ChronicleMedianSourceAdapter.sol";
import {ChainlinkDestinationAdapter} from "../adapters/destination-adapters/ChainlinkDestinationAdapter.sol";
import {IAggregatorV3Source} from "../interfaces/chainlink/IAggregatorV3Source.sol";
import {BaseFactory} from "./BaseFactory.sol";
import {IMedian} from "../interfaces/chronicle/IMedian.sol";

/**
 * @title OvalChronicle is the reccomended Oval contract that allows Oval to extract OEV generated by
 * Chronicle price feeds and allow usage via the Chainlink interface.
 */
contract OvalChronicle is MutableUnlockersController, ChronicleMedianSourceAdapter, ChainlinkDestinationAdapter {
    constructor(
        IMedian _source,
        address[] memory _unlockers,
        uint256 _lockWindow,
        uint256 _maxTraversal,
        uint256 _maxAge,
        address _owner
    )
        ChronicleMedianSourceAdapter(_source)
        MutableUnlockersController(_lockWindow, _maxTraversal, _unlockers, _maxAge)
        ChainlinkDestinationAdapter(18)
    {
        _transferOwnership(_owner);
    }
}

/**
 * @title StandardChronicleFactory is the recommended factory for use cases that want a Chronicle source and Chainlink
 * interface.
 * @dev This is the best factory for most use cases that need a Chronicle source, but there are other variants that may be
 * needed if different mutability or interface choices are desired.
 */
contract StandardChronicleFactory is Ownable, BaseFactory {
    constructor(uint256 maxTraversal, address[] memory _defaultUnlockers)
        BaseFactory(maxTraversal, _defaultUnlockers)
    {}

    /**
     * @notice Creates the Chronicle Oval instance.
     * @param chronicle Chronicle source contract.
     * @param lockWindow the lockWindow used for this Oval instance. This is the length of the window
     * for the Oval auction to be run and, thus, the maximum time that prices will be delayed.
     * @param maxAge max age of a price that is used in place of the current price. If the only available price is
     * older than this, OEV is not captured and the current price is provided.
     * @return oval deployed oval address.
     */
    function create(IMedian chronicle, uint256 lockWindow, uint256 maxAge) external returns (address oval) {
        oval = address(new OvalChronicle(chronicle, defaultUnlockers, lockWindow, MAX_TRAVERSAL, maxAge, owner()));
        emit OvalDeployed(msg.sender, oval, lockWindow, MAX_TRAVERSAL, owner(), defaultUnlockers);
    }
}
