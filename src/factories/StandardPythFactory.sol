// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.17;

import {Ownable} from "openzeppelin-contracts/contracts/access/Ownable.sol";
import {MutableUnlockersController} from "../controllers/MutableUnlockersController.sol";
import {PythSourceAdapter} from "../adapters/source-adapters/PythSourceAdapter.sol";
import {ChainlinkDestinationAdapter} from "../adapters/destination-adapters/ChainlinkDestinationAdapter.sol";
import {IAggregatorV3Source} from "../interfaces/chainlink/IAggregatorV3Source.sol";
import {BaseFactory} from "./BaseFactory.sol";
import {IPyth} from "../interfaces/pyth/IPyth.sol";

/**
 * @title OvalPyth is the reccomended Oval contract that allows Oval to extract OEV generated by
 * Pyth price feeds and allow usage via the Chainlink interface.
 */
contract OvalPyth is MutableUnlockersController, PythSourceAdapter, ChainlinkDestinationAdapter {
    constructor(
        IPyth source,
        bytes32 pythPriceId,
        address[] memory unlockers,
        uint256 lockWindow,
        uint256 maxTraversal,
        address owner
    )
        PythSourceAdapter(source, pythPriceId)
        MutableUnlockersController(lockWindow, maxTraversal, unlockers)
        ChainlinkDestinationAdapter(18)
    {
        _transferOwnership(owner);
    }
}

/**
 * @title StandardPythFactory is the recommended factory for use cases that want a Pyth source and Chainlink
 * interface.
 * @dev This is the best factory for most use cases that need a Pyth source, but there are other variants that may be
 * needed if different mutability or interface choices are desired.
 */
contract StandardPythFactory is Ownable, BaseFactory {
    IPyth immutable pyth;

    constructor(IPyth _pyth, uint256 maxTraversal, address[] memory _defaultUnlockers)
        BaseFactory(maxTraversal, _defaultUnlockers)
    {
        pyth = _pyth;
    }

    /**
     * @notice Creates the Pyth Oval instance.
     * @param pythPriceId the Pyth price id.
     * @param lockWindow the lockWindow used for this Oval instance. This is the length of the window
     * for the Oval auction to be run and, thus, the maximum time that prices will be delayed.
     * @return oval deployed oval address.
     */
    function create(bytes32 pythPriceId, uint256 lockWindow) external returns (address oval) {
        oval = address(new OvalPyth(pyth, pythPriceId, defaultUnlockers, lockWindow, MAX_TRAVERSAL, owner()));
        emit OvalDeployed(msg.sender, oval, lockWindow, MAX_TRAVERSAL, owner(), defaultUnlockers);
    }
}
