// // SPDX-License-Identifier: BUSL-1.1
// pragma solidity 0.8.17;

// import {Ownable} from "openzeppelin-contracts/contracts/access/Ownable.sol";
// import {MutableUnlockersController} from "../controllers/MutableUnlockersController.sol";
// import {PythSourceAdapter} from "../adapters/source-adapters/PythSourceAdapter.sol";
// import {ChainlinkDestinationAdapter} from "../adapters/destination-adapters/ChainlinkDestinationAdapter.sol";
// import {IAggregatorV3Source} from "../interfaces/chainlink/IAggregatorV3Source.sol";
// import {BaseFactory} from "./BaseFactory.sol";

// /**
//  * @title OvalPyth is the reccomended Oval contract that allows Oval to extract OEV generated by
//  * Pyth price feeds and allow usage via the Chainlink interface.
//  */
// contract OvalPyth is MutableUnlockersController, PythSourceAdapter, ChainlinkDestinationAdapter {
//     constructor(IAggregatorV3Source source, address[] memory unlockers, uint256 _lockWindow, uint256 _maxTraversal, address owner)
//         PythSourceAdapter(source)
//         MutableUnlockersController(_lockWindow, _maxTraversal, unlockers)
//         ChainlinkDestinationAdapter(source.decimals())
//     {
//         _transferOwnership(owner);   
//     }
// }

// /**
//  * @title StandardChainlinkFactory is the reccomended factory for Chainlink source/destination contracts that allow
//  * Oval to extract OEV generated by Chainlink usage.
//  */
// contract StandardChainlinkFactory is Ownable {
//     /**
//      * @notice Creates the Chainlink Oval instance.
//      * @param source the Chainlink oracle source contract.
//      * @param lockWindow the lockWindow used for this Oval instance. This is the length of the window
//      * for the Oval auction to be run and, thus, the maximum time that prices will be delayed.
//      */
//     function create(IAggregatorV3Source source, uint256 lockWindow) external returns (address) {
//         return address(new OvalChainlink(source, defaultUnlockers, lockWindow, MAX_TRAVERSAL, owner()));
//     }
// }
